/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: naxete (https://sketchfab.com/naxete)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/79df6677512249e9b98b898676182e1b
title: Ghost in the Shell Geisha Mask
*/

import * as THREE from 'three'
import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { useFrame, useThree } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh
    mesh_1: THREE.Mesh
    mesh_2: THREE.Mesh
  }
  materials: {
    Eyes: THREE.MeshStandardMaterial
    Face: THREE.MeshStandardMaterial
    Face02: THREE.MeshStandardMaterial
  }
}

export default function GeishaMask({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const {camera, mouse} = useThree()
  const { nodes, materials } = useGLTF('/geisha_mask/scene.gltf') as GLTFResult

  useLayoutEffect(() => {
    camera.position.set(0, 0, 2)
  }, [])

  useFrame((state) => {
    group.current.rotation.set(
      THREE.MathUtils.lerp(group.current.rotation.x, (state.mouse.y % 2)/-2, 0.01), 
      THREE.MathUtils.lerp(group.current.rotation.y, state.mouse.x/2, 0.01), 
      0,
      'YXZ'
      )
  })

  return (
    <group ref={group} {...props} dispose={null} onClick={() => console.log(group.current.rotation.y, mouse.y)} >
      <group rotation={[-Math.PI / 2.2, 0, -Math.PI * 0.25]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-Math.PI / 2, 0, 0]}>
            <group rotation={[Math.PI / 2, 0, 0]}>
              <mesh geometry={nodes.mesh_0.geometry} material={materials.Eyes} />
              <mesh geometry={nodes.mesh_1.geometry} material={materials.Face} />
              <mesh geometry={nodes.mesh_2.geometry} material={materials.Face02} />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/geisha_mask/scene.gltf')
